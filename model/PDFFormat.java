package model;

import java.io.FileOutputStream;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.*;

public class PDFFormat implements Format{

	List<Book> books;
	
	private static String FILE = "PDFreport.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                    Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                    Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                    Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                    Font.BOLD);
	
    
	@Override
	public void createReport() {
		
		 try {
             Document document = new Document();
             PdfWriter.getInstance(document, new FileOutputStream(FILE));
             document.open();
             addMetaData(document);
             addTitlePage(document);
             addContent(document);
             document.close();
     } catch (Exception e) {
             e.printStackTrace();
     }
		
	}
	
	private static void addMetaData(Document document) {
        document.addTitle("PDF Report");
        document.addSubject("Books out of stock");
        document.addKeywords("Books");
        document.addAuthor("Andreea Cozma");
        document.addCreator("Andreea Cozma");
}
	
	private static void addTitlePage(Document document)
            throws DocumentException {
    Paragraph preface = new Paragraph();

    addEmptyLine(preface, 1);

    preface.add(new Paragraph("Books out of stock", catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph(
                    "Report generated at: " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                    smallBold));
    
    addEmptyLine(preface, 3);
  
    preface.add(new Paragraph(
                    "Books out of stock",
                    redFont));

    addEmptyLine(preface, 2);
    document.add(preface);
}

	private static void addContent(Document document) throws DocumentException {
	   
		
		 PdfPTable table = new PdfPTable(4);
		
		    PdfPCell c1 = new PdfPCell(new Phrase("Title"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		
		    c1 = new PdfPCell(new Phrase("Author"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		
		    c1 = new PdfPCell(new Phrase("Price"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		    c1 = new PdfPCell(new Phrase("Genre"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		
		    table.setHeaderRows(1);
		
		    XMLReaderBook reader = new XMLReaderBook(new SearchQuantityStrategy());
			List<Book> books = reader.executeStrategy("0");
			for (Book book : books) {
				table.addCell(book.getTitle());
				table.addCell(book.getAuthor());
				table.addCell(String.valueOf(book.getPrice()));
				table.addCell(book.getGenre());
			}
		    		
			
		    document.add(table);
	}
	
	
	private static void addEmptyLine(Paragraph paragraph, int number) {
	    for (int i = 0; i < number; i++) {
	            paragraph.add(new Paragraph(" "));
	    }
	
	}
	
	public static void main(String args[])
	{
		FactoryAccess<PDFFactory> factoryAccess = new FactoryAccess<>(PDFFactory.class);
		Factory factory = factoryAccess.getFactory();
		Format format = factory.getFormat();
		
		format.createReport();
		
	}


}
